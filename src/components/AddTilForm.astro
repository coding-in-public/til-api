---
import Input from "@ui/Input.astro";
import TextArea from "@ui/TextArea.astro";
import Button from "@ui/Button.astro";
import { actions } from "astro:actions";

type Props = {
  data?: {
    title: string;
    content: string;
    id?: number;
  };
  errors: {
    title?: string[] | undefined;
    content?: string[] | undefined;
  };
};

const { data, errors } = Astro.props;
---

<form
  action={actions.tils}
  method="post"
  class="grid gap-4 max-w-md"
  id="add-til-form"
>
  {data?.id && <input type="hidden" type="number" name="id" value={data.id} />}
  <Input
    label="Title"
    autofocus
    value={data?.title}
    error={errors.title?.[0]}
  />
  <TextArea label="Content" value={data?.content} error={errors.content?.[0]} />
  <Button type="submit">Add TIL</Button>
</form>

<script>
  import { actions, isInputError } from "astro:actions";

  const form = document.getElementById("add-til-form");

  form?.addEventListener("submit", async (e) => {
    e.preventDefault();
    const formData = new FormData(e.currentTarget as HTMLFormElement);

    const { data, error } = await actions.tils(formData);

    if (error) {
      console.error(error);
      if (isInputError(error)) {
        for (const [key, value] of Object.entries(error.fields)) {
          document
            .querySelector(`[name=${key}]`)
            ?.classList.add("border-red-500");
          const errorElement = document.getElementById(`${key}-error`);
          if (errorElement) {
            errorElement.classList.remove("hidden");
            errorElement.textContent = value[0];
          }
        }
      }
    }

    if (data) {
      window.location.href = `/tils/${data}`;
    }
  });
</script>
